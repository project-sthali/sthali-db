{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A FastAPI package dependency for SthaliCRUD perform DB queries Docs : https://project-sthali.github.io/sthali-db/ PyPI : https://pypi.org/project/sthali-db/ Source : https://github.com/project-sthali/sthali-db/ Board : https://github.com/users/project-sthali/projects/1/","title":"Home"},{"location":"installation/","text":"Instalation Using PYPI pip install sthali-db Using GitHub repo git clone https://github.com/project-sthali/sthali-db.git cd sthali-db pip install .","title":"Installation"},{"location":"installation/#instalation","text":"","title":"Instalation"},{"location":"installation/#using-pypi","text":"pip install sthali-db","title":"Using PYPI"},{"location":"installation/#using-github-repo","text":"git clone https://github.com/project-sthali/sthali-db.git cd sthali-db pip install .","title":"Using GitHub repo"},{"location":"license/","text":"MIT License Copyright (c) 2025 Jhunu Fernandes Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"requirements/","text":"Requirements Prerequisites python >= 3.10 pip package manager Runtime Dependencies This project requires the following Python packages with specific versions: sthali-core >= 0.0.8 tinydb >= 4.8.2 Optional Dependencies This project has optional dependencies that can be installed for additional features: dev coverage[toml] >= 7.9.1 ruff >= 0.12.0 tests coverage[toml] >= 7.9.1 stage build >= 1.2.1 coverage[toml] >= 7.9.1","title":"Requirements"},{"location":"requirements/#requirements","text":"","title":"Requirements"},{"location":"requirements/#prerequisites","text":"python >= 3.10 pip package manager","title":"Prerequisites"},{"location":"requirements/#runtime-dependencies","text":"This project requires the following Python packages with specific versions: sthali-core >= 0.0.8 tinydb >= 4.8.2","title":"Runtime Dependencies"},{"location":"requirements/#optional-dependencies","text":"This project has optional dependencies that can be installed for additional features:","title":"Optional Dependencies"},{"location":"requirements/#dev","text":"coverage[toml] >= 7.9.1 ruff >= 0.12.0","title":"dev"},{"location":"requirements/#tests","text":"coverage[toml] >= 7.9.1","title":"tests"},{"location":"requirements/#stage","text":"build >= 1.2.1 coverage[toml] >= 7.9.1","title":"stage"},{"location":"usage/","text":"Usage nothing to see here, plz disperse","title":"Usage"},{"location":"usage/#usage","text":"nothing to see here, plz disperse","title":"Usage"},{"location":"api/class_DB/","text":"DB Represents a database client adapter. Args: db_spec (DBSpecification): The specification for the database connection. table (str): The name of the table to interact with.","title":"DB"},{"location":"api/class_DB/#db","text":"Represents a database client adapter. Args: db_spec (DBSpecification): The specification for the database connection. table (str): The name of the table to interact with.","title":"DB"},{"location":"api/class_DBSpecification/","text":"DBSpecification Represents the specification for a database connection. Attributes: path (str): Path to the database. This field specifies the path to the database file or server. client (str): One of available database clients. This field specifies the database client to be used for the connection. The available options are &#34;Default&#34;, &#34;Postgres&#34;, &#34;Redis&#34;, &#34;SQLite&#34;, and &#34;TinyDB&#34;. Defaults to &#34;Default&#34;.","title":"DBSpecification"},{"location":"api/class_DBSpecification/#dbspecification","text":"Represents the specification for a database connection. Attributes: path (str): Path to the database. This field specifies the path to the database file or server. client (str): One of available database clients. This field specifies the database client to be used for the connection. The available options are &#34;Default&#34;, &#34;Postgres&#34;, &#34;Redis&#34;, &#34;SQLite&#34;, and &#34;TinyDB&#34;. Defaults to &#34;Default&#34;.","title":"DBSpecification"},{"location":"api/class_FieldSpecification/","text":"FieldSpecification Represents a field with its metadata. Attributes: name (str): Name of the field. type (typing.Any): Type annotation of the field. default (Default | None): Default value/factory of the field. Defaults to None. description (str | None): Description of the field. Defaults to None. optional (bool | None): Indicates if the field accepts None. Defaults to None. title (str | None): Title of the field. Defaults to None.","title":"FieldSpecification"},{"location":"api/class_FieldSpecification/#fieldspecification","text":"Represents a field with its metadata. Attributes: name (str): Name of the field. type (typing.Any): Type annotation of the field. default (Default | None): Default value/factory of the field. Defaults to None. description (str | None): Description of the field. Defaults to None. optional (bool | None): Indicates if the field accepts None. Defaults to None. title (str | None): Title of the field. Defaults to None.","title":"FieldSpecification"},{"location":"api/class_Models/","text":"Models Represents a collection of models. This class is responsible for creating and managing models dynamically based on the provided fields. It provides methods to create different types of models such as create, response, and update models. Attributes: name (str): The name of the collection of models. create_model (type[Base]): The dynamically created model for creating new instances. response_model (type[BaseWithId]): The dynamically created model for response payloads. update_model (type[Base]): The dynamically created model for updating existing instances.","title":"Models"},{"location":"api/class_Models/#models","text":"Represents a collection of models. This class is responsible for creating and managing models dynamically based on the provided fields. It provides methods to create different types of models such as create, response, and update models. Attributes: name (str): The name of the collection of models. create_model (type[Base]): The dynamically created model for creating new instances. response_model (type[BaseWithId]): The dynamically created model for response payloads. update_model (type[Base]): The dynamically created model for updating existing instances.","title":"Models"},{"location":"api/class_PaginateParameters/","text":"PaginateParameters Represents the parameters for retrieving items. Attributes: skip (pydantic.NonNegativeInt): The number of items to skip. Defaults to 0. limit (pydantic.NonNegativeInt): The maximum number of items to return. Defaults to 100.","title":"PaginateParameters"},{"location":"api/class_PaginateParameters/#paginateparameters","text":"Represents the parameters for retrieving items. Attributes: skip (pydantic.NonNegativeInt): The number of items to skip. Defaults to 0. limit (pydantic.NonNegativeInt): The maximum number of items to return. Defaults to 100.","title":"PaginateParameters"},{"location":"api/class_Types/","text":"Types Types class provides a mechanism to manage a custom enumeration of types. Attributes: types_enum (TypeEnum): An enumeration of various types and values. Methods: get(name: str) -&gt; typing.Any: Retrieve an attribute from the `types_enum` based on the given name. set(name: str, value: typing.Any = None, operation: typing.Literal[&#34;add&#34;, &#34;del&#34;] = &#34;add&#34;) -&gt; None: Modifies the `types_enum` attribute by adding or deleting an enumeration member.","title":"Types"},{"location":"api/class_Types/#types","text":"Types class provides a mechanism to manage a custom enumeration of types. Attributes: types_enum (TypeEnum): An enumeration of various types and values. Methods: get(name: str) -&gt; typing.Any: Retrieve an attribute from the `types_enum` based on the given name. set(name: str, value: typing.Any = None, operation: typing.Literal[&#34;add&#34;, &#34;del&#34;] = &#34;add&#34;) -&gt; None: Modifies the `types_enum` attribute by adding or deleting an enumeration member.","title":"Types"}]}